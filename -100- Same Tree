/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null&&q==null) return true;
        if(p!=null&&q!=null&&p.val==q.val)
            return isSameTree(p.left,q.left)&&isSameTree(p.right,q.right);
        return false;
    }
}


redo:
/*** recursive solution ***/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null&&q==null) return true;
        if(p==null||q==null) return false;
        return p.val==q.val&&isSameTree(p.left, q.left)&&isSameTree(p.right, q.right);
    }
}


/*** iterative solution ***/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        // if(p==null&&q==null) return true;
        // if(p==null||q==null) return false;
        // return p.val==q.val&&isSameTree(p.left, q.left)&&isSameTree(p.right, q.right);
        
        if(p==null&&q==null) return true;
        if(p==null||q==null) return false;
        
        Stack<TreeNode> s1=new Stack<TreeNode>();
        Stack<TreeNode> s2=new Stack<TreeNode>();
        s1.push(p);
        s2.push(q);
        while(!s1.isEmpty()&&!s2.isEmpty()){
            TreeNode cur1=s1.pop();
            TreeNode cur2=s2.pop();
            if(cur1.val!=cur2.val) return false;
            
            if(cur1.left!=null&&cur2.left!=null){
                s1.push(cur1.left);
                s2.push(cur2.left);
                //bug 1: forget '==null'
            }else if(!(cur1.left==null&&cur2.left==null)){
                return false;
            }
            
            if(cur1.right!=null&&cur2.right!=null){
                s1.push(cur1.right);
                s2.push(cur2.right);
            }else if(!(cur1.right==null&&cur2.right==null)){
                return false;
            }
        }
        return true;
    }
}
