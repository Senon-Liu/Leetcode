/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {

    Stack<TreeNode> st;
    TreeNode cur;
    
    public BSTIterator(TreeNode root) {
        st=new Stack<TreeNode>();
        cur=root;
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !st.isEmpty()||cur!=null;
    }

    /** @return the next smallest number */
    public int next() {
        while(cur!=null){
            st.push(cur);
            cur=cur.left;
        }
        TreeNode tmp=st.pop();
        cur=tmp.right;
        return tmp.val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */





redo:
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    ArrayList<TreeNode> list;
    int index;
    public BSTIterator(TreeNode root) {
        list=new ArrayList<TreeNode>();
        iterator(root, list);
        index=0;
    }
    
    public void iterator(TreeNode root, ArrayList<TreeNode> list){
        Stack<TreeNode> s=new Stack<TreeNode>();
        TreeNode cur=root;
        while(true){
            while(cur!=null){
                s.push(cur);
                cur=cur.left;
            }
            
            if(s.isEmpty()){
                break;
            }
            
            cur=s.pop();
            list.add(cur);
            
            cur=cur.right;
        }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(index<list.size()){
            return true;
        }
        return false;
    }

    /** @return the next smallest number */
    public int next() {
        return list.get(index++).val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
