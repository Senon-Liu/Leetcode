/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        return Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    }
}

/*** non-recursion solution ***/
public class Solution{
    public int maxDepth(TreeNode root){
        if(root==null) return 0;
        
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        int level=0;
        
        q.offer(root);
        while(!q.isEmpty()){
            int cnt=q.size();
            level++;
            for(int i=0;i<cnt;i++){
                TreeNode top=q.poll();
                if(top.left!=null){
                    q.offer(top.left);
                }
                if(top.right!=null){
                    q.offer(top.right);
                }
            }
        }
        
        return level;
    }
}
