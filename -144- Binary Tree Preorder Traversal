/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 /*** recursive ***/
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ret=new ArrayList<Integer>();
        rec_preorder(root,ret);
        return ret;
    }
    
    public void rec_preorder(TreeNode root, List<Integer> ret){
        if(root==null) return;
        ret.add(root.val);
        rec_preorder(root.left,ret);
        rec_preorder(root.right,ret);
    }
}

/*** Iterative ***/
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ret=new ArrayList<Integer>();
        if(root==null) return ret;
        Stack<TreeNode> s=new Stack<TreeNode>();
        s.push(root);
        while(!s.isEmpty()){
            TreeNode cur=s.pop();
            ret.add(cur.val);
            if(cur.right!=null){
                s.push(cur.right);
            }
            if(cur.left!=null){
                s.push(cur.left);
            }
        }
        return ret;
    }
}



redo:
/*** recursive solution ***/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ret=new ArrayList<Integer>();
        if(root==null) return ret;
        helper(root, ret);
        return ret;
    }
    
    public void helper(TreeNode root, List<Integer> l){
        if(root==null) return;
        l.add(root.val);
        helper(root.left, l);
        helper(root.right, l);
    }
}

/*** iterative solution ***/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ret=new ArrayList<Integer>();
        if(root==null) return ret;
        Stack<TreeNode> s=new Stack<TreeNode>();
        s.push(root);
        while(!s.isEmpty()){
            TreeNode cur=s.pop();
            ret.add(cur.val);
            if(cur.right!=null){
                s.push(cur.right);
            }
            if(cur.left!=null){
                s.push(cur.left);
            }
        }
        return ret;
    }
}
