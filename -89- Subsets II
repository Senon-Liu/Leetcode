public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] num) {
     List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        if(num == null || num.length ==0) {
            return result;
        }
        Arrays.sort(num);
        subsetsHelper(result, list, num, 0);

        return result;
    }

    private void subsetsHelper(List<List<Integer>> result,
        List<Integer> list, int[] num, int pos) {

        result.add(new ArrayList<Integer>(list));
        
        for (int i = pos; i < num.length; i++) {
            if ( i != pos && num[i] == num[i - 1]) {
                continue;
            }    
            list.add(num[i]);
            subsetsHelper(result, list, num, i + 1);
            list.remove(list.size() - 1);
        }
    }
}



redo:
public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] num) {
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        if(num == null) return ret;
        //bug 1: should sort, cuz need non-descending order
        Arrays.sort(num);
        helper(new ArrayList<Integer>(), ret, num, 0);
        return ret;
    }
    
    public void helper(List<Integer> l, List<List<Integer>> ret, int[] num, int n){
        if(!ret.contains(l)){
            ret.add(new ArrayList<Integer>(l));
        }
        for(int i = n;i < num.length;i++){
            l.add(num[i]);
            helper(l, ret, num, i + 1);
            l.remove(l.size() - 1);
        }
    }
}
