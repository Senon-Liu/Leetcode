public class Solution {
    boolean [] isUsed;
    int numLength;
    ArrayList<ArrayList<Integer>> output;
    ArrayList <Integer> al;

    public ArrayList<ArrayList<Integer>> permute(int[] num) {
        numLength = num.length;
        al = new ArrayList <Integer>();
        output = new ArrayList<ArrayList<Integer>>();
        isUsed = new boolean[num.length];
        doPermutation(0, num);
        return output;
    }
    public void doPermutation(int index, int[] num) {
        // base case
        if (index == numLength) {
            output.add((ArrayList<Integer>)al.clone());
            return;
        }
        for (int i = 0; i < numLength; i++) {
            if (!isUsed[i]) {
                al.add(num[i]);
                isUsed[i] = true;
                doPermutation(index + 1, num);
                isUsed[i] = false;
                al.remove(index);
            }
        }
    }
}



redo:
public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> ret=new ArrayList<List<Integer>>();
        if(num==null) return ret;
        
        helper(new ArrayList<Integer>(), num, ret);
        return ret;
    }
    
    public void helper(List<Integer> l, int[] num, List<List<Integer>> ret){
        if(l.size()==num.length) {
            ret.add(new ArrayList<Integer>(l));
            return;
        }
        
        for(int i=0;i<num.length;i++){
            if(l.contains(num[i])){
               continue; 
            }
            l.add(num[i]);
            dfs(l, num, ret);
            l.remove(l.size()-1);
        }
    }
}
