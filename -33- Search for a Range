public class Solution {
    public int[] searchRange(int[] A, int target) {
        int start, end, mid;
        int[] bound = new int[2]; 
        
        // search for left bound
        start = 0; 
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                end = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[start] == target) {
            bound[0] = start;
        } else if (A[end] == target) {
            bound[0] = end;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        // search for right bound
        start = 0;
        end = A.length - 1;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                start = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (A[end] == target) {
            bound[1] = end;
        } else if (A[start] == target) {
            bound[1] = start;
        } else {
            bound[0] = bound[1] = -1;
            return bound;
        }
        
        return bound;
        /*
        int[] result=new int[2];
        int left=0, right=A.length-1;
        Boolean flag=false;
        if(A.length<2){
            result[0]=-1;
            result[1]=-1;
            return result;
        }
        while(left<=right){
            if(A[left]<=target){
                left++;
            }
            if(A[right]>=target){
                right--;
            }
            if(A[left]==target||A[right]==target){
                flag=true;
            }
        }
        if(flag==true){
            result[0]=left;
            result[1]=right;
            return result;
        }else{
            result[0]=-1;
            result[1]=-1;
            return result;
        }
        */
    }
}



redo:
public class Solution {
    public int[] searchRange(int[] A, int target) {
        int[] ret=new int[2];
        if(A.length==0) return ret;
        int len=A.length;
        int l=0;
        int r=len-1;
        
        while(l<r-1){
            int mid=l+(r-l)/2;
            if(A[mid]==target){
                //when check for l bound, should be r=mid
                r=mid;
            }else if(A[mid]<target){
                l=mid;
            }else{
                r=mid;
            }
        }
        if(A[l]==target){
            ret[0]=l;
        }else if(A[r]==target){
            ret[0]=r;
        }else{
            ret[0]=ret[1]=-1;
            return ret;
        }
        
        l=0;
        r=len-1;
        while(l<r-1){
            int mid=l+(r-l)/2;
            if(A[mid]==target){
                //when check for r bound, should be l=mid
                l=mid;
            }else if(A[mid]<target){
                l=mid;
            }else{
                r=mid;
            }
        }
        if(A[r]==target){
            ret[1]=r;
        }else if(A[l]==target){
            ret[1]=l;
        }else{
            ret[0]=ret[1]=-1;
            return ret;
        }
        return ret;
    }
}

