public class Solution {
    public int threeSumClosest(int[] num, int target) {
        int min=Integer.MAX_VALUE;
        int res=0;
        Arrays.sort(num);
        for(int i=0;i<num.length;i++){
            int a=num[i];
            int k=i+1;
            int l=num.length-1;
            while(k<l){
                int b=num[k];
                int c=num[l];
                if(a+b+c==target){
                    return target;
                }
                else if(a+b+c>target){
                    l=l-1;
                    int temp=Math.abs(a+b+c-target);
                    if(temp<min){
                        min=temp;
                        res=a+b+c;
                    }
                }else{
                    k=k+1;
                    int temp=Math.abs(a+b+c-target);
                    if(temp<min){
                        min=temp;
                        res=a+b+c;
                    }
                }
            }
        }
        return res;
    }
}




redo:
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        int len=num.length;
        if(len<3||num==null) return -1;
        if(len==3) return num[0]+num[1]+num[2];
        int min=Integer.MAX_VALUE;
        int ret=0;
        Arrays.sort(num);
        for(int i=0;i<len;i++){
            //skip duplicates, reduce the redundancy
            if(i>0&&num[i]==num[i-1]){
                continue;
            }
            int a=num[i];
            int k=i+1;
            int l=len-1;
            while(k<l){
                int b=num[k];
                int c=num[l];
                if(a+b+c==target) return target;
                else if(a+b+c<target){
                    k++;
                }else{
                    l--;
                }
                int sum=a+b+c;
                if(Math.abs(target-sum)<min){
                    ret=sum;
                    min=Math.abs(target-sum);
                }
            }
        }
        return ret;
    }
}
