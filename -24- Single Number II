public class Solution {
    public int singleNumber(int[] A) {
        int ones = 0, twos = 0;
    for(int i = 0; i < A.length; i++){
        ones = (ones ^ A[i]) & ~twos;
        twos = (twos ^ A[i]) & ~ones;
    }
    return ones;
    }
}



public class Solution {
    public int singleNumber(int[] A) {
        if (A == null || A.length == 0) {
            return -1;
        }
        int result=0;
        int[] bits=new int[32];
        for (int i = 0; i < 32; i++) {
            for(int j = 0; j < A.length; j++) {
                bits[i] += A[j] >> i & 1;
                bits[i] %= 3;
            }

            result |= (bits[i] << i);
        }
        return result;
    }
}


redo:
public class Solution {
    public int singleNumber(int[] A) {
        if(A==null) return -1;
        Map<Integer, Integer> m=new HashMap<Integer, Integer>();
        for(int i=0;i<A.length;i++){
            if(m.containsKey(A[i])){
                m.put(A[i], m.get(A[i])+1);
            }else{
                m.put(A[i], 1);
            }
        }
        
        for(int i=0;i<A.length;i++){
            if(m.get(A[i])==1) return A[i];
        }
        
        return -1;
    }
}

public class Solution {
    public int singleNumber(int[] A) {
        if (A == null) {
            return 0;
        }
        
        int rst = 0;
        for (int i = 0; i < 32; i++) {
            int sum = 0;
            for (int j = 0; j < A.length; j++) {
                if (((A[j] >> i) & 1) == 1) {
                    sum ++;
                    sum = sum%3;
                }
            }    
            rst |= sum << i;
        }
        
        return rst;
    }
}
