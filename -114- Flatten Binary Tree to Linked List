/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        if(root==null) return;
        Stack<TreeNode> s=new Stack<TreeNode>();
        s.push(root);
        while(!s.isEmpty()&&root!=null){
            TreeNode head=s.pop();
            if(head.right!=null){
                s.push(head.right);
            }
            if(head.left!=null){
                s.push(head.left);
            }
            if(!s.isEmpty()){
                head.right=s.peek();
            }
            head.left=null;
        }
    }
}



redo:
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void flatten(TreeNode root) {
        dfs(root);   
    }
    
    public TreeNode dfs(TreeNode root){
        if(root==null) return null;
        TreeNode left=root.left;
        TreeNode right=root.right;
        
        //init root
        root.left=null;
        root.right=null;
        TreeNode tail=root;
        
        if(left!=null){
            tail.right=left;
            tail=dfs(left);
        }
        
        if(right!=null){
            tail.right=right;
            tail=dfs(right);
        }
        
        return tail;
    }
}
