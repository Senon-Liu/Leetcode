public class Solution {
   private ArrayList<ArrayList<Integer>> results;

    public ArrayList<ArrayList<Integer>> combinationSum2(int[] candidates,
            int target) {
        if (candidates.length < 1) {
            return results;
        }

        ArrayList<Integer> path = new ArrayList<Integer>();
        java.util.Arrays.sort(candidates);
        results = new ArrayList<ArrayList<Integer>> ();
        combinationSumHelper(path, candidates, target, 0);

        return results;
    }

    private void combinationSumHelper(ArrayList<Integer> path, int[] candidates, int sum, int pos) {
        if (sum == 0) {
            results.add(new ArrayList<Integer>(path));
        }

        if (pos >= candidates.length || sum < 0) {
            return;
        }

        int prev = -1;
        for (int i = pos; i < candidates.length; i++) {
            if (candidates[i] != prev) {
                path.add(candidates[i]);
                combinationSumHelper(path, candidates, sum - candidates[i], i + 1);
                prev = candidates[i];
                path.remove(path.size()-1);
            }
        }
    }

}



redo:
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ret=new ArrayList<List<Integer>>();
        if(candidates==null) return ret;
        Arrays.sort(candidates);
        helper(0, candidates, target, new ArrayList<Integer>(), ret);
        return ret;
    }
    
    public void helper(int n, int[] candidates, int target, List<Integer> l, List<List<Integer>> ret){
        if(target==0&&(!ret.contains(l))){
            //ret.add(l);
            ret.add(new ArrayList<Integer>(l));
            return;
        }
        if(target<0) return;
        for(int i=n;i<candidates.length;i++){
            l.add(candidates[i]);
            helper(i, candidates, target-candidates[i], l, ret);
            l.remove(l.size()-1);
        }
    }
}
