/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        Stack<TreeNode> s=new Stack<TreeNode>();
        Stack<Integer> sums=new Stack<Integer>();
        
        s.push(root);
        sums.push(sum);
        
        while(!s.isEmpty()&&root!=null){
            TreeNode head=s.pop();
            int value=sums.pop();
            if(head.left==null&head.right==null&&head.val==value) return true;
            if(head.right!=null){
                s.push(head.right);
                sums.push(value-head.val);
            }
            if(head.left!=null){
                s.push(head.left);
                sums.push(value-head.val);
            }
        }
        return false;
    }
}




redo:
/*** iteration solution ***/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null) return false;
        Stack<TreeNode> s=new Stack<TreeNode>();
        Stack<Integer> sums=new Stack<Integer>();
        s.push(root);
        sums.push(sum);
        while(!s.isEmpty()){
            TreeNode cur=s.pop();
            int val=sums.pop();
            if(cur.left==null&&cur.right==null&&cur.val==val){
                return true;
            }
            if(cur.right!=null){
                s.push(cur.right);
                //bug 1: should be 'val-cur.val', not 'sum-cur.val'
                sums.push(val-cur.val);
            }
            if(cur.left!=null){
                s.push(cur.left);
                sums.push(val-cur.val);
            }
        }
        return false;
    }
}


/*** recursive solution ***/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null) return false;
        if(root.left==null&&root.right==null&&root.val==sum){
            return true;
        }
        return hasPathSum(root.left, sum-root.val)||hasPathSum(root.right, sum-root.val);
    }
}
