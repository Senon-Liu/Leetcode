public class Solution {
    public int evalRPN(String[] tokens) {
          Stack<Integer> s = new Stack<Integer>();
        String operators = "+-*/";
        for(String token : tokens){
            if(!operators.contains(token)){
                s.push(Integer.valueOf(token));
                continue;
            }

            int a = s.pop();
            int b = s.pop();
            if(token.equals("+")) {
                s.push(b + a);
            } else if(token.equals("-")) {
                s.push(b - a);
            } else if(token.equals("*")) {
                s.push(b * a);
            } else {
                s.push(b / a);
            }
        }
        return s.pop();
    }
}





redo:
public class Solution {
    public int evalRPN(String[] tokens) {
        if(tokens==null) return 0;
        Stack<Integer> nums=new Stack<Integer>();
        if(tokens.length==1) return Integer.valueOf(tokens[0]);
        int sum=0;
        for(int i=0;i<tokens.length;i++){
            if(!tokens[i].equals("+")&&!tokens[i].equals("-")&&!tokens[i].equals("*")&&!tokens[i].equals("/")){
                //bug 1: should be Integer.valueOf
                nums.push(Integer.valueOf(tokens[i]));
            }else{
                int op1=nums.pop();
                int op2=nums.pop();
                if(tokens[i].equals("+")){
                    sum=op1+op2;
                    nums.push(sum);
                }else if(tokens[i].equals("-")){
                    //bug 2: op2-op1
                    sum=op2-op1;
                    nums.push(sum);
                }else if(tokens[i].equals("*")){
                    sum=op1*op2;
                    nums.push(sum);
                }else{
                    if(op1==0) return -1;
                    sum=op2/op1;
                    nums.push(sum);
                }
            }
        }
        return sum;
    }
}
