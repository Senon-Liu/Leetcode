/* O(lgn) */

public class Solution {
    public int findPeakElement(int[] num) {    
        return helper(num,0,num.length-1);
    }

public int helper(int[] num,int start,int end){
    if(start == end){
        return start;
    }else if(start+1 == end){
        if(num[start] > num[end]) return start;
        return end;
    }else{

        int m = (start+end)/2;

        if(num[m] > num[m-1] && num[m] > num[m+1]){

            return m;

        }else if(num[m-1] > num[m] && num[m] > num[m+1]){

            return helper(num,start,m-1);

        }else{

            return helper(num,m+1,end);

        }

    }
}
    
}



redo:
public class Solution {
    public int findPeakElement(int[] num) {
        if(num.length<=1) return 0;
        return helper(num, 0, num.length-1);
    }
    
    public int helper(int[] num, int l, int r){
        if(l==r){
            return l;
            //bug 1: boundary exception!!!
        }else if(l+1==r){
            if(num[l]>num[r]) return l;
            return r;
        }else{
            int mid=(l+r)/2;
            if(num[mid]>num[mid-1]&&num[mid]>num[mid+1]){
                return mid;
            }else if(num[mid+1]>num[mid]&&num[mid]>num[mid-1]){
                return helper(num, mid+1, r);
            }else {
                return helper(num,l, mid-1);
            }   
        }
    }
}
