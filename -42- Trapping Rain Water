public class Solution {
    public int trap(int[] A) {
        if(A==null) return 0;
       
       int[] left=new int[A.length];
       int[] right=new int[A.length];
       
       for(int i=0;i<A.length;i++){
           left[i]=i==0?A[i]:Math.max(left[i-1],A[i]);
       }
       for(int i=A.length-1;i>0;i--){
           right[i]=i==A.length-1?A[A.length-1]:Math.max(right[i+1],A[i]);
       }
       
       int total=0;
       for(int i=0;i<A.length;i++){
           int height=Math.min(left[i],right[i]);
           if(height>A[i]){
               total+=height-A[i];
           }
       }
       return total;
    }
}


/*** O(N) solution one loop ***/

public int trap(int[] A) {

    int left = 0, right = A.length-1;

    int level = 0, result = 0;

    while (left<right){

        level = Math.max(Math.min(A[left], A[right]), level);

        if (A[left]<=A[right]){
            result += level-A[left];
            left++;
        }
        else{
            result += level-A[right];
            right--;
        }
    }

    return result;

}
