/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 
 /*** recursive ***/
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        rec_inorder(root,res);
        return res;
    }
    
    public void rec_inorder(TreeNode n, List<Integer> res){
        if(n==null) return;
        rec_inorder(n.left,res);
        res.add(n.val);
        rec_inorder(n.right,res);
    }
}

/*** Iterative ***/
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        if(root==null) return res;
        Stack<TreeNode> s=new Stack<TreeNode>();
        TreeNode cur=root;
        while(true){
            while(cur!=null){
                s.push(cur);
                cur=cur.left;
            }
            if(s.isEmpty()){
                break;
            }
            cur=s.pop();
            res.add(cur.val);
            
            cur=cur.right;
        }
        
        return res;
    }
}
