public class Solution {
    public String countAndSay(int n) {
    if(n<=0) {
        return "";
    }

    String nowStr="1";
    for(int current=1; current<n; current++) {
        nowStr = getSay(nowStr);
    }
    return nowStr;
}

String getSay(String pre) {
    int count =0;
    StringBuilder reStr = new StringBuilder("");
    for(int i = 0; i<pre.length(); i++){
        count ++;
        if ((i+1 < pre.length()) && (pre.charAt(i) != pre.charAt(i + 1))) {
            reStr = reStr.append(count).append(pre.charAt(i));
            count = 0;
        }
        else if ((i+1 == pre.length())) {
            reStr = reStr.append(count).append(pre.charAt(i));
        }   
    }
    return reStr.toString();
}
}



redo:
public class Solution {
    public String countAndSay(int n) {
        if(n==0) return null;
        if(n==1) return "1";
        String s=countAndSay(n-1);
        int cnt=0;
        int len=s.length();
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<len;i++){
            cnt++;
            if(i==len-1||i<len&&s.charAt(i)!=s.charAt(i+1)){
                sb.append(cnt);
                sb.append(s.charAt(i));
                cnt=0;
            }
        }
        return sb.toString();
    }
}
