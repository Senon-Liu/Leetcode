public class Solution {
    public void rotate(int[] nums, int k) {
        int len=nums.length;
        k=k%len;
        if(k==0) return;
        
        reverse(nums, 0, len-k-1);
        reverse(nums, len-k, len-1);
        reverse(nums, 0, len-1);
    }
    
    public void reverse(int[] nums, int left, int right){
        while(left<right){
            int t=nums[left];
            nums[left]=nums[right];
            nums[right]=t;
            left++;
            right--;
        }
    }
}

/*** solution 2 ***/
/*** O(N) runtime, O(1) space ***/
public class Solution {
    public void rotate(int[] nums, int k) {
        if (nums.length == 0) return;
        int n = nums.length;
        while ((k %= n) > 0 && n > 1) {
            int range = n - k;
            for (int i = 1; i <= range; i++) {
                int val = nums[n - i];
                nums[n - i] = nums[n - i - k];
                nums[n - i - k] = val;
            }
            n = k;
            k = n - (range % k);
        }
    }
}
