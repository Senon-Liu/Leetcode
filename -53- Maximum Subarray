public class Solution {
    public int maxSubArray(int[] A) {
        int max = A[0];
     int currentSum = A[0];
     for(int i = 1; i < A.length; i++) {
         if(currentSum  < 0) {
             currentSum = A[i];
             max = max >= currentSum ? max : currentSum;
         }
         else {
             currentSum += A[i];
             max = max >= currentSum ? max : currentSum;
         }     }
     return max;
   }
}


redo:
/*** window solution ***/
public class Solution {
    public int maxSubArray(int[] A) {
        if(A==null) return -1;
        int max=A[0];
        int sum=A[0];
        for(int i=1;i<A.length;i++){
            if(sum<0){
                sum=0;
            }
            sum+=A[i];
            max=Math.max(sum, max);
            // if(sum<=0) {
            //     max=Math.max(max, A[i]);
            //     if(A[i]<0) sum=0;
            //     else sum=max;
            // }
        }
        return max;
    }
}

/*** dp solution ***/
public int maxSubArray(int[] A) {
        int n = A.length;
        int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];
        dp[0] = A[0];
        int max = dp[0];

        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);
            max = Math.max(max, dp[i]);
        }

        return max;
}

/*** divide and conquer solution ***/
class Solution {
public:
    int maxSubArray(int A[], int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(n==0) return 0;
        return maxSubArrayHelperFunction(A,0,n-1);
    }

    int maxSubArrayHelperFunction(int A[], int left, int right) {
        if(right == left) return A[left];
        int middle = (left+right)/2;
        int leftans = maxSubArrayHelperFunction(A, left, middle);
        int rightans = maxSubArrayHelperFunction(A, middle+1, right);
        int leftmax = A[middle];
        int rightmax = A[middle+1];
        int temp = 0;
        for(int i=middle;i>=left;i--) {
            temp += A[i];
            if(temp > leftmax) leftmax = temp;
        }
        temp = 0;
        for(int i=middle+1;i<=right;i++) {
            temp += A[i];
            if(temp > rightmax) rightmax = temp;
        }
        return max(max(leftans, rightans),leftmax+rightmax);
    }
};
