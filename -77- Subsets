public class Solution {
    public List<List<Integer>> subsets(int[] S) {
        
        List<List<Integer>> result = new ArrayList<List<Integer>>();		
        if(S==null) return result;			
        Arrays.sort(S);		
        int len=S.length;		
        for(long i=0;i<(1<<len);i++){						
            String str=Long.toBinaryString(i);			
            List<Integer> list=new ArrayList<Integer>();			
            for(int j=str.length()-1;j>=0;j--){				
                if(str.charAt(j)=='1') 
                list.add(S[str.length()-1-j]);	}			
                result.add(list);		
            
        }				
        return result;	
        /*
        Arrays.sort(S);
        List<List<Integer>> ret=new ArrayList<List<Integer>>();
        List<Integer> n= new ArrayList<Integer>();
        ret.add(n);
        for(int i=0;i<S.length;i++){
            int size=ret.size();
            for(int j=0;j<size;j++){
                ret.add(ret.get(j));
                ret.get(ret.size()-1).add(S[i]);
            }
        }
        return ret;
        */
    }
}


redo:
public class Solution {
    public List<List<Integer>> subsets(int[] S) {
        List<List<Integer>> ret=new ArrayList<List<Integer>>();
        if(S==null) return ret;
        
        Arrays.sort(S);
        
        dfs(0, new ArrayList<Integer>(), S, ret);
        return ret;
    }
    
    public void dfs(int n, List<Integer> l, int[] S, List<List<Integer>> ret){
        ret.add(new ArrayList<Integer>(l));
        
        for(int i=n;i<S.length;i++){
            l.add(S[i]);
            dfs(i+1, l, S, ret);
            l.remove(l.size()-1);
        }
    }
}
           
