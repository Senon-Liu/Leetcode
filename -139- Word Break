public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        // int flag=s.length();
        
        // Iterator it= dict.iterator();
        // while(it.hasNext()){
        //     String tmp=it.next().toString();
        //     int length=tmp.length();
        //     if(length>s.length()){
        //      ;   
        //     }else if(length==s.length()){
        //         if(s.equals(tmp)){
        //             return true;
        //         }else{
        //             ;
        //         }
        //     }else{
        //         String cmp=s.substring(0,length);
        //         if(tmp.equals(cmp)){
        //             s=s.substring(length, s.length());
        //             flag=s.length();
        //             if(flag==0) return true;
        //         }
        //     }
            
        // }
        
        // return false;

        boolean [] breakable = new boolean[s.length()+1];
        breakable[0] = true;

        for(int i=1;i<=s.length();i++){
            for(int j=0;j<i;j++){
                if(breakable[j]&&dict.contains(s.substring(j,i))){
                    breakable[i] = true;
                    break;
                }
            }
        }
        return breakable[s.length()];
        
    }
}




redo:
/*** TLE ***/
public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        if(s==null) return false;
        boolean flag=false;
        return helper(0, 1, s, dict, flag);
    }
    
    public boolean helper(int n, int index, String s, Set<String> dict, boolean flag){
        if(index==s.length()-1&&flag) return true;
        if(index>s.length()) return false;
        int len=s.length();
        for(int i=index;i<len;i++){
            String cur=s.substring(n, i);
            if(dict.contains(cur)){
                flag=true;
                helper(i, i+1, s, dict, flag);
            }else{
                flag=false;
                helper(n, i+1, s, dict, flag);
            }
        }
        return false;
    }
}



/*** DP solution ***/
public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        if(s==null) return false;
        boolean[] dp=new boolean[s.length()+1];
        dp[0]=true;
        for(int i=1;i<=s.length();i++){
            for(int j=0;j<i;j++){
                if(dp[j]&&dict.contains(s.substring(j,i))){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}


/*** modified dfs solution ***/
public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        // DFS
        Set<Integer> set = new HashSet<Integer>();
        return dfs(s, 0, dict, set);
    }

    private boolean dfs(String s, int index, Set<String> dict, Set<Integer> set){
        // base case
        if(index == s.length()) return true;
        // check memory
        if(set.contains(index)) return false;
        // recursion
        for(int i = index+1;i <= s.length();i++){
            String t = s.substring(index, i);
            if(dict.contains(t))
                if(dfs(s, i, dict, set))
                    return true;
                else
                    set.add(i);
        }
        set.add(index);
        return false;
    }
}
