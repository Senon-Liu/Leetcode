/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        return help(1,n);
    }
    
    public List<TreeNode> help(int left, int right){
        List<TreeNode> ret=new ArrayList<TreeNode>();
        
        if(left>right) {
            ret.add(null);
            return ret;
        }
        
        for(int i=left;i<=right;i++){
            List<TreeNode> leftlist=help(left, i-1);
            List<TreeNode> rightlist=help(i+1, right);
            for(int j=0;j<leftlist.size();j++){
                for(int k=0;k<rightlist.size();k++){
                    TreeNode root=new TreeNode(i);
                    root.left=leftlist.get(j);
                    root.right=rightlist.get(k);
                    ret.add(root);
                }
            }
        }
        return ret;
    }
}



redo:

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
public class Solution {
    public List<TreeNode> generateTrees(int n) {
        // List<TreeNode> ret=new ArrayList<TreeNode>();
        // if(n==0) return ret;
        // helper(ret, new TreeNode, n, 0);
        return helper(1, n);
    }
    
    public List<TreeNode> helper(int l, int r){
        List<TreeNode> list=new ArrayList<TreeNode>();
        if(l>r){
            list.add(null);
            return list;
        }
            for(int i=l;i<=r;i++){
                List<TreeNode> Lnode=helper(l, i-1);
                List<TreeNode> Rnode=helper(i+1, r);
                for(TreeNode left: Lnode){
                    for(TreeNode right: Rnode){
                        TreeNode cur=new TreeNode(i);
                        cur.left=left;
                        cur.right=right;
                        list.add(cur);
                    }
                }
            }
        return list;
        
    }
}
