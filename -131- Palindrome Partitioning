public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ret=new ArrayList<List<String>>();
        
        if(s==null) {
            return  ret;
        }
        dfs(s, 0, new ArrayList<String>(), ret);
        return ret;
    }
    
    public void dfs(String s, int index, List<String> l, List<List<String>> ret){
        int len=s.length();
        if(index==len){
            ret.add(new ArrayList<String>(l));
            return; 
        }
        
        for(int i=index;i<len;i++){
            String sub= s.substring(index, i+1);
            if(!isPalindrome(sub)){
                continue;
            }
            l.add(sub);
            dfs(s, i+1, l, ret);
            l.remove(l.size()-1);
        }
    }
    
    
    public boolean isPalindrome(String s){
        int i=0;
        int j=s.length()-1;
        
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
