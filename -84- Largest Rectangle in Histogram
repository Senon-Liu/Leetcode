public class Solution {
    public int largestRectangleArea(int[] height) {
        // int[] min = new int[height.length];
        //   int maxArea = 0;
        //   for(int i = 0; i < height.length; i++){
        //       if(height[i] != 0 && maxArea/height[i] >= (height.length - i)) {
        //           continue;
        //       }
        //      for(int j = i; j < height.length; j++){
        //          if(i == j) min[j] = height[j];
        //          else {
        //              if(height[j] < min[j - 1]) {
        //                  min[j] = height[j];
        //              }else min[j] = min[j-1];
        //          }
        //          int tentativeArea = min[j] * (j - i + 1);
        //          if(tentativeArea > maxArea) {
        //              maxArea = tentativeArea;
        //          }
        //      }
        //  }
        //  return maxArea;
        //if(height.length==1) return height[0];
        
        Stack<Integer> s=new Stack<Integer>();
        
        int i=0;
        int max=0;
        
        int h=height.length;
        while(i<=h){
            if(s.isEmpty()||i<h&&height[i]>=height[s.peek()]){
                s.push(i);
                i++;
            }else{
                int curH=height[s.pop()];
                int width=s.isEmpty()? i: i-s.peek()-1;
                max=Math.max(max, curH*width);
            }
        }
        return max;
    }
}
